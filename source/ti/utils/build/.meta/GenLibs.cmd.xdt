%%{
    /*
     *  ======== GenLibs.cmd.xdt ========
     *  Generate linker command file containing an ordered list of libraries
     *  required to link with the current SysConfig configuration.
     */

    /* map SysConfig compiler setting to a toolchain name */
    let c2tc = {ccs: "TI", gcc: "GCC", iar: "IAR", ticlang: "TICLANG"};
    let toolchain = c2tc[("compiler" in system) ? system.compiler : "ccs"];
    let libopt = {TI: "-l", GCC: "", IAR: "", TICLANG: "-l"};

    /* get GenLibs module and its config settings */
    let asserts = "";

    let GenLibs = system.modules["/ti/utils/build/GenLibs"];
    if (GenLibs == null) {
        /* GenLibs wasn't added, but we need its methods, so we must get it */
        GenLibs = system.getScript("/ti/utils/build/GenLibs");
    }
    else {
        /* GenLibs was (in)directly added via .syscfg script */
        if (GenLibs.$static.toolchain != "") {
            toolchain = GenLibs.$static.toolchain;
        }
        asserts = GenLibs.$static.asserts;
    }

    /* libList - gen toolchain-specific lib options to pass to the linker */
    function libList(groups, indent) {
        var lines = [];

        if (indent == null) {
            indent = "";
        }

        /* push - push a line, prefixed by indent, to lines[] */
        function push(line) {
            lines.push(indent + line);
        }

        /* libLine - return toolchain-specific library option for lib */
        function libLine(lib) {
            var line = '"' + lib + '"';
            return (libopt[toolchain] + line);
        }

        /* for all library groups returned by getLibs functions */
        for (var i = 0; i < groups.length; i++) {
            var group = groups[i];

            /* gen linker lines to include all libs in the group */
            push("/* libraries required for " + group.name + " */");
            for (var j = 0; j < group.libs.length; j++) {
                var lib = group.libs[j];
                push(libLine(lib));
            }
            push("");
        }

        return (lines.join('\n'));
    }

    /* get groups of libraries from other modules (ordered by dependenies) */
    let argv = [{asserts: asserts}].concat(args);
    let groups = GenLibs.genList(argv);
%%}
/*
 *  ======== ti_utils_build_linker.cmd ========
 *  Libraries needed to link this application's configuration
 *
 *  NOTE, this feature is currently 'experimental' and requires software
 *  components configured in your system to correctly indicate their
 *  dependencies and report the libraries needed for your specific
 *  configuration.  Please take this 'experimental' branding under
 *  consideration when reviewing the library file list below, as
 *  well as the library order listed.  If you find errors, please report
 *  them on TI's E2E forums (https://e2e.ti.com/) so they can be
 *  addressed in a future release.
 *
 *  This file allows one to portably link applications that use SysConfig
 *  _without_ having to make changes to build rules when moving to a new
 *  device OR when upgrading to a new version of a SysConfig enabled
 *  product.
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool for the
 *                `toolchain` C/C++ toolchain
 */

% if (toolchain == "TI" || toolchain == "IAR" || toolchain == "TICLANG") {
`libList(groups)`
% }
% else if (toolchain == "GCC") {
INPUT (
`libList(groups, "    ")`
)
% }
% else {
%     var libs = libList(groups);
/*
 *  WARNING: unsupported toolchain specified: '`toolchain`'
%     if (libs != "") {
 *  The libaries listed below must be added to your linker's  options
%     }
%     else {
 *  Fortunately, no libraries need to be added to the link line.
%     }
 */
`libs`
% }
