/*
 * Copyright (c) 2012-2019, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * ======== package.bld ========
 */

Pkg.otherFiles = ["package.bld", "NDK_SemaphoreP.h"];

/*
 *       M3 Library Build Options
 *
 * NOTE: currently only IPv4 M3 libraries have reduced sizes.
 *
 * Building for M3 requires reduced values for the following sizes,
 * normally defined in pbm.c and mem.c:
 *
 *     RAW_PAGE_SIZE
 *     RAW_PAGE_COUNT
 *
 * By defining _NDK_MIN_PAGE_SIZE, this allows
 * these sizes to be redefined elsewhere.  For M3, we'll redefine
 * them here, in the compiler options variable 'copts', then pass this for all
 * BIOS 6 library versions for M3:
 */
var m3PbmCopts = " -D_NDK_MIN_PAGE_SIZE" +
                 " -DRAW_PAGE_SIZE=3072" +
                 " -DRAW_PAGE_COUNT=8 ";

/* List of all the OS files */
var osFiles = [
    "mem.c",
    "mem_data.c",
    "oem.c",
    "ossys.c",
    "semaphore.c",
    "os_ll.c",
];

var osFilesBios = [
    "NDK_SemaphoreP_tirtos.c",
    "task.c"
];

/* List of Linux specific OS files */
var osFilesLinux = [
    "mem.c",
    "mem_data.c",
    "linux/oem.c",
    "linux/ossys.c",
    "linux/task.c",
    "linux/semaphore.c",
];

/* lib/ is a generated directory that 'xdc clean' should remove */
Pkg.generatedFiles.$add("lib/");

/* include source files in the release package */
Pkg.attrs.exportSrc = true;

/* 'core' release is the product release (without Linux srcs/libs) */
var coreRelease = Pkg.addRelease(Pkg.name.replace(/\./g, '_') + ",core");
coreRelease.attrs.label = "core";

/* Build the libraries for all the targets specified. */
for (var i = 0; i < Build.targets.length; i++) {
    var target = Build.targets[i];

    if (target.name != "Linux86" && target.name != "Linux86_64") {

        // BIOS non-semaphore OSAL library:

        var libName = "os";
        var libOptions = {
                copts: "-DUSE_LL_SEMAPHORE=0 -D_NDK_EXTERN_CONFIG ",
                incs: ndkPathInclude,
                releases: [coreRelease]
        };

        // build M3 library with reduced buffer sizes for pbm.c and mem.c
        if (target.name == "M3") {
            libOptions.copts += m3PbmCopts;
        }

        libOptions.incs += posixIncs + "/" +
            getPosixIncDirectory(target.suffix);

        var lib = Pkg.addLibrary("lib/" + libName, target, libOptions);
        lib.addObjects(osFiles.concat(osFilesBios));

        // FreeRTOS non-semaphore OSAL library:

        libName = "os_freertos";
        libOptions.copts = "-DUSE_LL_SEMAPHORE=0 -D_NDK_EXTERN_CONFIG -DNDK_FREERTOS_BUILD";
        libOptions.incs = ndkPathInclude +
            posixIncs + "/" + getPosixIncDirectory(target.suffix);

        // build M3 library with reduced buffer sizes for pbm.c and mem.c
        if (target.name == "M3") {
            libOptions.copts += m3PbmCopts;
        }

        var lib = Pkg.addLibrary("lib/" + libName, target, libOptions);
        lib.addObjects(osFiles);
    }
    else {
        var libName = "os_linux";
        var libOptions = {
                copts: "-DUSE_LL_SEMAPHORE=0 -D_NDK_EXTERN_CONFIG -D__USE_UNIX98 ",
                incs: ndkPathInclude,
        };

        var lib = Pkg.addLibrary("lib/" + libName, target,
                libOptions);
        lib.addObjects(osFilesLinux);
    }

    if (target.name != "Linux86" && target.name != "Linux86_64") {

        // BIOS semaphore based OSAL library:
        var libName = "os_sem";
        var libOptions = {
                copts: "-DUSE_LL_SEMAPHORE=1 -D_NDK_EXTERN_CONFIG ",
                incs: ndkPathInclude,
                releases: [coreRelease]
        };

        // build M3 library with reduced buffer sizes for pbm.c and mem.c
        if (target.name == "M3") {
            libOptions.copts += m3PbmCopts;
        }

        libOptions.incs += posixIncs + "/" + getPosixIncDirectory(target.suffix);

        var lib = Pkg.addLibrary("lib/" + libName, target, libOptions);
        lib.addObjects(osFiles.concat(osFilesBios));

        // FreeRTOS non-semaphore OSAL library:

        libName = "os_sem_freertos";
        libOptions.copts = "-DUSE_LL_SEMAPHORE=1 -D_NDK_EXTERN_CONFIG -DNDK_FREERTOS_BUILD";
        libOptions.incs = ndkPathInclude +
                posixIncs + "/" + getPosixIncDirectory(target.suffix);

        // build M3 library with reduced buffer sizes for pbm.c and mem.c
        if (target.name == "M3") {
            libOptions.copts += m3PbmCopts;
        }

        var lib = Pkg.addLibrary("lib/" + libName, target, libOptions);
        lib.addObjects(osFiles);
    }
    else {
        var libName = "os_sem_linux";
        var libOptions = {
                copts: "-DUSE_LL_SEMAPHORE=1 -D_NDK_EXTERN_CONFIG -D__USE_UNIX98 ",
                incs: ndkPathInclude,
        };

        var lib = Pkg.addLibrary("lib/" + libName, target,
                libOptions);
        lib.addObjects(osFilesLinux);
    }

}
