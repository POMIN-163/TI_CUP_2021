%%{
/*
 * Copyright (c) 2018-2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
    let Settings = system.modules["/ti/usblib/Settings"];
    let instances = Settings.$instances[0];
    let configs = system.modules["/ti/usblib/Configurations"].$instances[0];
    let Common = system.getScript("/ti/usblib/Common.js");
    let MSC = system.modules["/ti/usblib/MSC"];
%%}

% if (MSC != null) {
/*
 *  ======== MSC Device ======== 
 */
    % for (var mscInstance of MSC.$instances) {
tUSBDMSCDevice `mscInstance.$name` = {
    `instances.vendorID`,   /* const uint16_t */ /* Vendor ID */
    `instances.productID`,   /* const uint16_t */ /* Product ID */
    "`mscInstance.vendorName.padEnd(8, ' ')`",   /* const uint8_t[8] */ /* Vendor Name */
    "`mscInstance.productName.padEnd(16, ' ')`",  /* const uint8_t [16] */ /* Product Name */
    "`mscInstance.version.padEnd(4, ' ')`",  /* const uint8_t[4] */ /* Version */
    `configs.maxPower`,   /* const uint16_t */ /* Max Power Consumption of Device in mA */
    `Common.formatPowerAttributes(configs)`,  /* const uint8_t */ /* Power Attributes */
    stringDescriptors_`instances.stringDescriptor.$name`,   /* const uint8_t* const* */ /* Pointer to String Descriptor Array */
    StringDescriptorsCount_`instances.stringDescriptor.$name`,  /* const uint32_t */ /* Number of descriptors in String Descriptor Array */
    {
        `mscInstance.openFunction`, /* initializes and opens a physical drive number */
        `mscInstance.closeFunction`,    /* closes the drive number used by MSC device */
        `mscInstance.readFunction`, /* reads from blocks */
        `mscInstance.writeFunction`,    /* writes to blocks */
        `mscInstance.numBlocksFunction`,    /* returns total number of blocks */
        `mscInstance.blockSizeFunction`,    /* returns block size */
    },  /* const tMSCDMedia */ /* Structure that holds access functions for this media */
    `mscInstance.usbHandler`,   /* const tUSBCallback */    /* USB Callback */
};
    % } // for of MSC.$instances
% } // MSC != null
