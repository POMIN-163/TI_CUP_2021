%%{
/*
 * Copyright (c) 2018-2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
    let Common = system.getScript("/ti/usblib/Common.js");
    let StringDescriptor = system.modules["/ti/usblib/StringDescriptor"];
%%}

% if (StringDescriptor != null) {
/*
 *  ======== USB String Descriptors =======
 */
    % for (var stringInstance of StringDescriptor.$instances) {
/* The languages supported by this device. */
const uint8_t languageDescriptor_`stringInstance.$name`[] =
{
    4,
    USB_DTYPE_STRING,
    USBShort(USB_LANG_EN_US)
};

/* The manufacturer string. */
const uint8_t manufacturerName_`stringInstance.$name`[] =
{
    `Common.formatStringDescriptor(stringInstance.manufacturerName)`
};

/* The product string. */
const uint8_t productName_`stringInstance.$name`[] =
{
    `Common.formatStringDescriptor(stringInstance.productName)`
};

/* The serial number string. */
const uint8_t serialNumber_`stringInstance.$name`[] =
{
    `Common.formatStringDescriptor(stringInstance.serialNumber)`
};

/* The configuration description string. */
const uint8_t configurationDescription_`stringInstance.$name`[] =
{
    `Common.formatStringDescriptor(stringInstance.configurationDescription)`
};

/* The interface description string */
const uint8_t interfaceDescription_`stringInstance.$name`[] =
{
    `Common.formatStringDescriptor(stringInstance.interfaceDescription)`
};

/* The descriptor string table. */
const uint8_t *const stringDescriptors_`stringInstance.$name`[] =
{
    languageDescriptor_`stringInstance.$name`,
    manufacturerName_`stringInstance.$name`,
    productName_`stringInstance.$name`,
    serialNumber_`stringInstance.$name`,
    configurationDescription_`stringInstance.$name`,
    interfaceDescription_`stringInstance.$name`
};

#define StringDescriptorsCount_`stringInstance.$name`   \
    (sizeof(stringDescriptors_`stringInstance.$name`) / \
    sizeof(uint8_t *))
    % } // for stringInstance
%}  // if StringDescriptor != null
